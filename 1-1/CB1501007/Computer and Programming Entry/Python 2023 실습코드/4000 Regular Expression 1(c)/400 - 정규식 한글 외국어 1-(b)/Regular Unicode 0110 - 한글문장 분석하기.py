
# 파이썬 정규식 한글처리 관련
# 한글 코드 범위
# ㄱ ~ ㅎ: 0x3131 ~ 0x314e
# ㅏ ~ ㅣ: 0x314f ~ 0x3163
# 가 ~ 힣: 0xac00 ~ 0xd79f

import re

text = """
프로그램 오류를 찾아 고치는 디버깅 작업은 소프트웨어 개발에서 아주 중요한 과정이다.
시스템에 문제가 생기면 일단 그 문제가 정말 ‘확실’한 것인지 반복해 확인해야 한다.
오류가 나면 보통 디버거(debugger)라는 특별한 프로그램을 사용해서 메모리에
저장된 값을 추적해야 한다.
디버거는 내시경, 실시간 CT 같은 것이다. 그런데 이 과정에서 간혹 황당한 일을
당하게 되는데, 이전의 오류가 추가 장치를 이용해서 확인하려고만 하면 사라지는
것이다. 이런 상황을 불확정성의 원리 제안자인 물리학자 하이젠베르크(Heisenberg)의
이름을 비틀어 하이젠버그(Heisenbug)라고 부른다.
즉 측정하려는 그 행위 자체가 시스템을 변화시켜 오류 측정에 영향을 미치는 것이다.
특히 여러 계산 장치를 연결한 병렬 시스템에서 이런 오류는 흔치 않게 나타난다.
여러 장치 간의 협업에서 발생하는 시간 차이에 따른 미묘한 오류가 검사작업을 하는
동안에 그 차이가 지연되어 이전의 오류는 놀랍게도 사라지는 것이다.
그러나 디버거를 끄고 정상적으로 돌려보면 오류는 어김없이 다시 나타난다.
하이젠버그를 겪어보지 못한 초보자들에게 이런 상황은 과학이 아니라 신앙이나
민간요법을 동원하고 싶은 생각까지도 들게 한다.
똥에서 오줌에서 summer에서도,
하이젠버그류의 오류는 일상에서도 볼 수 있다. 뭔가를 확인하기 위해
시스템에 개입하는 그 순간부터 시스템은 새로운 상태가 된다는 것을 우리는
종종 망각한다. 예를 들어 목욕물을 시험관에 담아서 막대 온도계로
측정하는 일을 생각해보자.
이때 시험관 속 온도계가 보여주는 온도는 그 안에 담긴 물의 온도가 아니라
온도계, 물, 시험관이 열역학적 평형을 이룬 시점의 온도 값이다.
시험관의 크기가 작을수록 실제 온도와의 차이는 커지게 된다.
병원 의사가 직접 재는 혈압이 집에서 잰 값보다 10 정도는 더 나온다는
‘흰옷 증후군’도 하이젠버그의 변형이다.
국민을 고정된 상수로 두는 정책과 제도는 실패할 수밖에 없다.
하이젠버그에서 보듯이 전시성 탐방이나 관제행사를 통해서는
민생의 오류를 확인하기 어렵다. 모든 것은 상대적이며 또한
동시적으로 변하기 때문이다.
"""


hangul = re.compile('([가-힣]+)에서') #앞부분 group()만 추출
La = re.findall(hangul, text)

print("\n  한글 단어 중에서 끝이 'OOO에서'의 앞부분 OOO ------")
for word in La :
    print(word)

hangul = re.compile('(([가-힣]+)에서)') #앞부분 group()만 추출
La = re.findall(hangul, text)

print("\n  한글 단어 중에서 끝이 'OOO에서'의 앞부분 OOO ------")
for word in La :
    print(word[0])

